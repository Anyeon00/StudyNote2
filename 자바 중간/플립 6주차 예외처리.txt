자바 플립
6-1 Object
모든 classs는 Object를 상속받음
Object에 있는 함수들도
ex)
String toString(){}

boolean equals(object obj){}

*오버라이딩 해주어야함
*toString은 출력할때 문자열과 객체레퍼런스를 같이 쓰면 자동으로
객체 레퍼런스 뒤에 써짐
ex) println(" " + q); = println(" " + q.toString());


6-2 예외처리   
Exception Handling (예외처리)

defensive programming : error확인(if문), error조치(조치코드)가 붙어있음
-> exception handling: 에러 확인과 에러조치를 분리, 에러확인은 공급자책임, 에러조치는 사용자책임
=> 에러상황에서도 sw가 (죽지않고) 그럭저럭 돌아가도록함 _비행기가 에러떳다고 꺼지면 안되니까

목적: 소프트웨어의 신뢰도(reliability)를 향상시키기 위해

공급자 : throw (에러발견하고 알림)(exception detection) -> implementation에서
사용자 : catch (에러처리)(exception handling) -> 메인메소드(사용자)에서 try 원래실행내용, catch exception처리
에러정보 : exception 객체


6-3 예외처리 예제
1. Specification에, 조건문에 throws ~Exception, implement 블록의 ~Exception의 파라미터에 exception설명내용 마음대로
2. StackException 클래스 만들기(Exception클래스 상속받기)
3. 메인메소드에서 사용할 때 try에 실행내용, catch에 예외처리&파라미터로 ~Exception ex
ex)
1. 공급자
int pop() throws StackException{
   if(top == null) throws new StackException("Stack","pop()", "Stack empty error");
   ....
}
2. 예외정보객체
class  StackException extends Exception{
   String className;
   String functionName;
   String reason;
   StackException(String cName, String fName, String reason){
      className = cName;
      functionName = fName;
      this.reason = reason;
   }
->> 사용자
psvm{
   try{
      pop();
   }
   catch(StackException ex) {
      exit(-1);
   }
}
* try안에서 실행중 exception발생하면 그 아래코드들은 의미없으므로 바로 catch로 이동

* 라이브러리 명세 (F1)누르면 해당 메소드 설명에 일어나는 Exception도 나옴

*왜 예외처리를 implementation에서 안하고 catch에서 하는지