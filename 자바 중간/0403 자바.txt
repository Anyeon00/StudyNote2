0403 자바 

linkedlist란 : 배열의 문제점을 해결하기 위한 colloection객체
배열의 문제점: 1. 배열의 크기가 고정되어있다
2. 삽입삭제가 비효율적임
headnode = reference임, size data도 같이 들어있음
Queue의 경우 레퍼런스를 두개 두고 제일앞에와 제일 뒤에위치를 기록

Queue(front레퍼런스 rear레퍼런스 size 레퍼런스), listnode(data, 노드포인터) 클래스 두개를 만들어야함
*노드클래스를 static 이너클래스로 만듦(클래스를 private으로 만들기) ex) static class Node
*자바는 이너클래스 2개가 존재: 1. private class를 만들목적, 2. 


linkedlist Queue specification:
add(int x)
isEmpty()
remove()
toString()
equals(object o)

직접 구현:
remove : 비어있는경우, 한개만 들어잇는경우(front, rear를 null로), else 세가지 경우로
equals: size가 같고, data가 같으면, queue로 typecasting해줘야함

편한 구현방법 2가지
1. 라이브러리에있는 linkedllist를 갖다 쓰는방법 -오라클 linkedlist 스페시피케이션에서 찾아 갖다쓰기
import 
:대부분의 specification이  라이브러리에 있음
-toString함수는 어딘가에 있음(밑으로 쭉내려가면?)
-equals : 파라미터 object를 linkedlist로 typecasting해줘야함

2. 상속을 받아쓰는법
class Queue extends linkedList<Integer>
	Queue(){
		super();
	}
	void add(int x){
		super.add(x);
	}
===========================================================
generic class

Queue<Integer> q = new Queue<Integer>();
Queue<String> q = new Queue<String>();

boxing : Integer a = 4; 했을때 
Integer는 객체고 a는 레퍼런스이므로 =4가 말이 안되는데 
자동으로 heap영역에 객체를 만들고 data int4를 넣어주는 기능(int변수처럼 사용할수있게해주는기능)
반대로 꺼낼때: unboxing

제네릭이 이 boxing을 이용함 

class Queue<E> //T는 변수이름이므로 type 또는 E _element
	E[ ] s;
생성자(){
s = new E[max];
}

void add(E x){}
E remove(){}
//object 레퍼런스 배열을 만드는것, E에