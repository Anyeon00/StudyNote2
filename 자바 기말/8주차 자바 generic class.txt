8주차 플립 자바 Generic class

Generic Class
1. type
2. null

제네릭 클래스만드는법(Generic Stack클래스같은거)
1 class 이름 옆에 Type 붙임 // Type는 사용할 객체명(변수명)으로서 사용됨, Type말고 다른 이름으로도 가능
ex) class Stack<Type>

2 class안에서 해당 type을 사용하는 변수들의 타입으로 Type를 사용
ex) 
public Type[ ] tArray;
public void push(Type item){
  tArray[top] = item;
}
public void Type pop(){}
....

3 Type[ ] tArray를 instantiation할때 Object배열을 만들고 Type배열로 type casting하여 assignment 함
ex) public Type[ ] tArray = (Type[ ])new Object[100];
// Type객체의 배열을 생성해줘야하는데 원래 Type이라는 타입은 없으므로 object레퍼런스 배열로
생성해주고 Type으로 typecasting 해주는것

4 Type[ ] 초기화할때 레퍼런스이므로 null로 초기화
ex) 
for(int i = 0; i < size; i++){
  tArray[i] = null;
}
// integer배열로 사용시 초기화할때 0을 넣으면 자동으로 boxing되어 저장되지만,
 다른 객체일시 reference로서 의미 그대로이므로 null을 넣어줌

5 메인메소드에서 사용시
Stack<Integer> a = new Stack<Integer>(); 
또는 Stack<Student> a = new Stack<Student>();
// collection객체안에 넣을 객체 type을 <>안에 넣어줌

6 a.push(10); 이라고 입력해도 boxing되어 a.push(new Integer(10));으로 해석됨

ex)
class Stack<T>{
  
* 사용시 Stack<T1, T2> 이렇게 두개 사용해됨
* 라이브러리의 Stack<T> 사용시 : using System.Collections.Generic;
----------------------------------------------------------------------------

arraylist: 같은타입의 데이터를 모아놓은 collection 객체, index를 이용해서 access함
data의 물리적인 순서랑 논리적인 순서가 일치함
*vector array 둘다 growable을 이용함(array는 다 growablearray라고 생각), vector가 하위호환

*random access : 한번에 팍 찾기
 sequencial access : 순서대로 탐색하면서 찾기

linkedlist: 배열의 문제점을 해결하기 위해서 고안한 collection객체
트레벌스할때 iterator 사용

class HashMap<K,V>: sorting을 하지 않고도 search를 빨리 할 수 있게 고안한 collection객체
data가 많지 않은 경우 sorting을 굳이 안하고 hashmap사용
argument로 Key, Value //이름과 전화번호
put(key,value), get(key)


리니어 search : 선형탐색, O(n)
binary serearch : O(log n)

Deque : 앞 뒤로 넣고 뺌(stack + queue)

Set : 똑같은 data는 중복되게 집어넣지 않는 collection객체 (집합)

Priority Queue(우선순위큐) :
키를 사용하는 queue
heap(1차원배열을 이진트리처럼사용)을 사용함
0번 index는 안씀 곱하기 2, 나누기2 하면서 작동해서
논리적으로 binary tree의 의미를 가짐
sorting이 완전히 된게 아니라 상하관계만 sorting돼있음
들어온놈 2로나눈 곳이랑 비교(트리에서 부모랑)
만약 같은 계급이라도 늦게오면 자식단계로 내려가있음 그래도 구조상 문제없음

직접짜보기
우선순위를 비교하는 능력을 각 개체가 가지고있어야 priority queue(라이브러리)가 작동함
-> 인터페이스 comparable

class ServiceMan implements Comparable{  //인터페이스사용햇으므로 인터페이스에있는 함수 compareTo()구현해줘야함
  public int compareTo(Objecto o){  //this랑 argument o랑 비교
     ServiceMan other = (ServiceMan)o;  //아무나 받기위해 Object로 받고 typecasting해줘야함
     int rank1 = rank.indeoxOf(o);
     int rank2 = rank.indexOf(other);
     return rank2 - rank1 ;  //음수 양수 나온걸로 판단
  }
    static{
	ranks.add("/");
	ranks.add("//");
	ranks.add("///");  //일일이 linear search하면 시간이 걸리는 단점 -> hash table
	...
    }    //static initiallizer  _정적으로 호출되는 초기화함수,평생 딱한번 저절로 호출됨(ServiceMan 클래스가 load될때
    //아래는 hash방법
    static HasnMap<String,Integer> ranks = new HashMap<String,Integer>();
      ranks.put("/",0);
      ranks.put("//",1);
      ...
    }
    //hash에서 comapareTo구현
    Service other = (serviceMan)o;
    int rank1 = rank.get(o);
    이하같음

    // 계급(비교기준)을 순서대로 배열에 넣어놓고 index번호로하는 방법도 있음


*실제로 직접짜서 쓰지말고 Generic Class를 잘 쓰는것에 의의


vector와 arrayList 차이
vector는 thread safe하다 sinkronize 돼있다(상호배제를 완벽하게처리)(multi threading하는 프로그램)

hashtable은 multi thread
hashmap은 single thread


