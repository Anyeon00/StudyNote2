11주차 자바 Matrix, 상속

Encpsulation : 복잡한 자료구조와 함수를 캡슐화

Matrix multiply
Matrix a.row = 가게 a b c ..
Matrix a.col = 파는 메뉴(햄버거 치킨 피자)

Matrix b.row = 파는 메뉴
Matrix b.col = 파는메뉴 각각의 매출, 각각의 이윤
//a.col = b.row

Matrix c.row = 가게 a b c ..
Matrix c.col = 가게들의 매출, 이윤
c.row = a.row, c.col = b.col

-----------------------------------------------------------------
객체지향4가지
data abstraction
inheritance
dynamic binding
polymorphism

자료추상화 data abstraction
어떠한 사물을 표현하고자 할 때 그 사물에 밀접한 연관이 있는 데이터와 함수를 묶어서 표현하는 제도


상속 inheritance
기존에 존재하는 클래스의 자원(데이터멤버/멤버함수)을 물려받아서 재사용하는 제도
*옛날에는 코드를 복사해가서 사용함
->중복코드, 원본이 틀렸을때 수정할 가능성

데이터멤버에 대한 조치 사항: 추가
멤버함수에 대한 조치사항: 추가, 변경(override)
*변경과 추가 차이

변경시의 행위: override (overload와 비교)
//override 상속관계에서 함수이름이같을때
//overload 상속관계는 아니지만 함수이름이 같을때


상속ex)
class 이름 extends 상속클래스이름{
  새로운 data member 추가
  새로운 function추가
  construct(){	//생성자
    super();
    ~;
  }
  construct(int x, int y){	//argument사용 생성자
    super(x);
    ~ = y;
  }
  void move(int x, int y){	//기존 function 추가
    super.move(x);
    ~ = y;
  }
  String toString(){		//function 변경_override
    ~;	
  }
*override할때 주의점 : 함수 이름이 같아도 argument부분이 다르면 다른 함수로 취급됨
ex) 부모 클래스에 add();가 있고 자식 클래스에 add(int x);가 있으면 다른 함수이므로 override할수없음
*scope:
protected : 자식클래스만 사용가능
private: 자식도 사용불가
