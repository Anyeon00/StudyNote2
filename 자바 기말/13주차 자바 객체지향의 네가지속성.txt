13주차 자바 객체지향의 네가지 속성

*aggregation: 부속품을 조합해서 객체를 만드는 것
*deligation: 위임

1. data abstraction(자료추상화)
어떠한 사물을 정의하고자 할 때 그 사물에 속하는 서로 밀접한 연관이 있는 데이터와 함수를 묶어서 표현하는 제도
//클래스에 그 객체의 정보와 행동을 data와 function으로 표현

2. inheritanace(상속)
기존에 만들어진 클래스의 자원(데이터멤버/멤버함수)을 물려 받아서 재사용할 수 있는 제도

3. dynamic binding(동적 바인딩)
함수 호출을 처리하기 위한 바인딩이 runtime시에 이루어지는 제도

4. polymorphism(다형개념)_poly:많다, morphism: 형태
객체들의 특성이 "서로 다르면서 같은 점" "서로 같으면서 다른 점"을 다루는 제도
(함수 overriding도 하나의 예)
polymorhic container(polymorphic collection객체)도 하나의 예_lion,rabbit 모두 animal이므로 같으면서도 다름, 각 객체의 function signature가 같아도 내용은 다름
----------------------------------------------------------------------------
3. dynamic binding

*바인딩이란: (main프로그램에서의)function call을 함수정의에 연결하기위헤 주소를 결정하는 행위/함수호출과 함수정의를 연결해주는 행위/호출될 함수의 주소를 결정해주는 행위
*프로그램실행시 프로그램과 함수가 메모리에 올라가는데 이 주소를 결정해야 함

ex) eat()함수가 animal클래스, lion extends animal클래스에도 있으면
메인 프로그램에서 Animal x; x.eat();을 호출할 경우 어디로 갈거냐, x를 따라갔을때 lion이면 lion, rabbit이면 rabbit을 호출(x = new lion(); 등)
하지만 보통 x = new ?일지 컴파일전에 정해지지 않음(if (sc.nextLine() = ?) {x = new lion();} 등) 
=> 컴파일 후 runtime시에 binding이 이루어지므로 dynamic binding

장점
1. if문의 현격한 감소
2. 프로그램의 유연성 증가(뜯어고치기 쉬움)(결합,분리_chain effect)
3. 보수유지성(maintenence) 증대

*함수와 메인프로그램이 같은 파일에 있는경우 컴파일시 바인딩이 이루어짐
다른파일에 있는경우 link시에 이루어짐
*다른 언어들은 static binding(프로그램 실행전에 호출될 함수의 주소가 결정되는 경우), 눈으로 읽으며 길을 잃을 경우가 없음
 

4. polymorpism
