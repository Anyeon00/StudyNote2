10주차 자바 String class *java.base -> java.lang ->String
dynamic allocation으로 이루어짐(문자열data를 assign할때 새로운 객체가 할당됨)

String x = "Kim";
String y = new String("lee");
String z;
z = x + y;
z = z + 123; //모두 문자열로 처리

char CharAt(3); //3번째 index에 있는 char를 알아옴	
int compareTo("str"); //String y랑 비교해서 큰지
ex) if (x.compareTo("str") > 0){ ~}
int compareToIgnoreCase("str") //compareTo에서 대소문자 구별없이 실행
boolean equals(object); //compare이 아니라 같은지
String concat("str"); //문자열 끝에 문자열 이어붙임
boolean contains("a"); //이 문자열을 포함하고 있는가
String.copyValueof("str") //char문자열을 string객체가 되게 만들어줌, static함수임
boolean endswith("str"); // 끝에 이런 문자열을 포함하고있느냐
boolean startsWith("str"); // 앞에 이런 문자열을 포함하고 있느냐
이하 다 사용해보기
format("%10d\n%20.2f",a,b)  //c언어 printf처럼 만듦, static함수
ex)
int a; double b;
String s = String.format("%10d\n%20.2f",a,b);
sout(s);
getBytes(); //String객체를 byte[] array로 만들어 돌려줌
getChars(int begin,int end,byte[] dst,int dstbegin) //String객체를 char[] array로 만들어 돌려줌
*token으로 만들어서 StringTokenizer할때 Bytearray나Char array가 필요
int hashCode(); //String객체의 hash값을 알아옴
int indexOf('m') //어떤 char의 위치를 알아옴
String intern(); //같은 문자열이 여러번사용되어 기억장소를 낭비할때 모아서 공유시키는것, 별로안씀
boolean isEmpty() //문자열이 비어있는지 ,boolean type
int lastIndexOf('m') //m의 위치를 뒤에서부터 찾기
int lastIndexOf(int ch, int from) // from번째 index부터 앞으로 찾기
int lastIndexOf(String str) //String에서 문자열 위치 찾기
int length() //문자열길이
String replace('m','t') // 문자열에서 m을 t로 바꾸기
String[] split("str") //StringTokenizer같은거
ex)
String x = "hello world mr. kim"
String s[ ] = x.split(" ");
sout(s[0]); // -> hello
sout(s[1]); // -> world
...
substring(3) //3번째 index부터 끝까지 반환
substring(3,7); //3번째 index부터 7앞 index까지 반환
trim() // 앞뒤의 공백문자를 다 없애줌

StringBuffer
String은 readonly이므로 매번 새로운 string객체를 생성하면 garbage등 퍼포먼스가 저하되므로
한개의 String을 무진장 많이 가공할 때 사용

